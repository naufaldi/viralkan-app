name: Build and Push Images

on:
  push:
    branches:
      - main

permissions:
  packages: write

jobs:
  commit-hash:
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.get_commit.outputs.commit_hash }}
    steps:
      - uses: actions/checkout@v4
      - name: Get commit hash
        id: get_commit
        run: echo "::set-output name=commit_hash::$(git rev-parse HEAD)"

  build-and-push-api:
    needs:
      - commit-hash
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/naufaldi/viralkan-app/viralkan-api:${{ needs.commit-hash.outputs.commit_hash }}
            ghcr.io/naufaldi/viralkan-app/viralkan-api:latest

  build-and-push-web:
    needs:
      - commit-hash
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Web Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            NEXT_PUBLIC_FIREBASE_API_KEY=${{ vars.NEXT_PUBLIC_FIREBASE_API_KEY }}
            NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
            NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
            NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
            NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
            NEXT_PUBLIC_FIREBASE_APP_ID=${{ vars.NEXT_PUBLIC_FIREBASE_APP_ID }}
            NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}
          tags: |
            ghcr.io/naufaldi/viralkan-app/viralkan-web:${{ needs.commit-hash.outputs.commit_hash }}
            ghcr.io/naufaldi/viralkan-app/viralkan-web:latest

  deploy-to-vps:
    needs: [build-and-push-api, build-and-push-web]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate to project directory
            cd ~/projects/viralkan-app || {
              echo "Project directory not found. Creating projects directory and cloning repository..."
              mkdir -p ~/projects
              git clone https://github.com/naufaldi/viralkan-app.git ~/projects/viralkan-app
              cd ~/projects/viralkan-app
            }

            # Update to latest code (optional - images are already built)
            git pull origin main || true

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull the latest images
            docker-compose -f docker-compose.prod.yml --env-file .env.production pull

            # Copy PostgreSQL configuration if it exists
            if [ -f "postgresql.conf" ]; then
              echo "üìã Copying PostgreSQL configuration..."
              cp postgresql.conf ~/projects/viralkan-app/
            fi

            # Deploy with new images
            docker-compose -f docker-compose.prod.yml --env-file .env.production up -d

            # Restart database to apply new configuration
            echo "üîÑ Restarting database to apply new configuration..."
            docker-compose -f docker-compose.prod.yml --env-file .env.production restart db

            # Wait for database to be ready
            echo "‚è≥ Waiting for database to be ready..."
            sleep 30

            # Verify database health
            echo "üîç Checking database health..."
            docker-compose -f docker-compose.prod.yml --env-file .env.production exec db pg_isready -U postgres

            # Clean up old images to save space
            docker image prune -f

            # Show running containers
            docker-compose -f docker-compose.prod.yml ps
